-- 32vid-player-mini from sanjuuni (Modified for CC:Tweaked 1.89, No Audio)
-- Licensed under the MIT license

local bit32_band, bit32_lshift, bit32_rshift, math_frexp = bit32.band, bit32.lshift, bit32.rshift, math.frexp
local function log2(n) local _, r = math_frexp(n) return r - 1 end

local file
local path = ...
if path:match "^https?://" then
    file = assert(http.get(path, nil, true))
else
    file = assert(fs.open(shell.resolve(path), "rb"))
end

if file.read(4) ~= "32VD" then file.close() error("Not a 32Vid file") end
local width, height, fps, nstreams, flags = ("<HHBBH"):unpack(file.read(8))

if nstreams ~= 1 then file.close() error("Separate stream files not supported by this tool") end
if bit32_band(flags, 1) == 0 then file.close() error("DEFLATE or no compression not supported by this tool") end
local _, nframes, ctype = ("<IIB"):unpack(file.read(9))
if ctype ~= 0x0C then file.close() error("Stream type not supported by this tool") end

local function readDict(size)
    local retval = {}
    for i = 0, size - 1, 2 do
        local b = file.read()
        retval[i] = bit32_rshift(b, 4)
        retval[i+1] = bit32_band(b, 15)
    end
    return retval
end

local init, read
if bit32_band(flags, 3) == 1 then
    local decodingTable, X, readbits, isColor
    function init(c)
        isColor = c
        local R = file.read()
        local L = 2^R
        local Ls = readDict(c and 24 or 32)
        if R == 0 then
            decodingTable = file.read()
            X = nil
            return
        end
        local a = 0
        for i = 0, #Ls do Ls[i] = Ls[i] == 0 and 0 or 2^(Ls[i]-1) a = a + Ls[i] end
        assert(a == L, a)
        decodingTable = {R = R}
        local x, step, next, symbol = 0, 0.625 * L + 3, {}, {}
        for i = 0, #Ls do
            next[i] = Ls[i]
            for _ = 1, Ls[i] do
                while symbol[x] do x = (x + 1) % L end
                x, symbol[x] = (x + step) % L, i
            end
        end
        for x = 0, L - 1 do
            local s = symbol[x]
            local t = {s = s, n = R - log2(next[s])}
            t.X, decodingTable[x], next[s] = bit32_lshift(next[s], t.n) - L, t, 1 + next[s]
        end
        local partial, bits, pos = 0, 0, 1
        function readbits(n)
            if not n then n = bits % 8 end
            if n == 0 then return 0 end
            while bits < n do pos, bits, partial = pos + 1, bits + 8, bit32_lshift(partial, 8) + file.read() end
            local retval = bit32_band(bit32_rshift(partial, bits - n), 2^n - 1)
            bits = bits - n
            return retval
        end
        X = readbits(R)
    end
    function read(nsym)
        local retval = {}
        if X == nil then
            for i = 1, nsym do retval[i] = decodingTable end
            return retval
        end
        local i = 1
        local last = 0
        while i <= nsym do
            local t = decodingTable[X]
            if isColor and t.s >= 16 then
                local l = 2^(t.s - 15)
                for n = 0, l-1 do retval[i+n] = last end
                i = i + l
            else
                retval[i], last, i = t.s, t.s, i + 1
            end
            X = t.X + readbits(t.n)
        end
        return retval
    end
else
    error("Unimplemented!")
end

local blitColors = {[0] = "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"}
local start = os.epoch "utc"
local lastyield = start
local vframe = 0
term.clear()
for _ = 1, nframes do
    local size, ftype = ("<IB"):unpack(file.read(5))
    if ftype == 0 then
        if os.epoch "utc" - lastyield > 3000 then sleep(0) lastyield = os.epoch "utc" end
        local dcstart = os.epoch "utc"
        init(false)
        local screen = read(width * height)
        init(true)
        local bg = read(width * height)
        local fg = read(width * height)
        local dctime = os.epoch "utc" - dcstart
        while os.epoch "utc" < start + vframe * 1000 / fps do end
        local texta, fga, bga = {}, {}, {}
        for y = 0, height - 1 do
            local text, fgs, bgs = "", "", ""
            for x = 1, width do
                text = text .. string.char(128 + screen[y * width + x])
                fgs = fgs .. blitColors[fg[y * width + x]]
                bgs = bgs .. blitColors[bg[y * width + x]]
            end
            texta[y + 1], fga[y + 1], bga[y + 1] = text, fgs, bgs
        end
        for i = 0, 15 do
            term.setPaletteColor(2^i, file.read() / 255, file.read() / 255, file.read() / 255)
        end
        for y = 1, height do
            term.setCursorPos(1, y)
            term.blit(texta[y], fga[y], bga[y])
        end
        vframe = vframe + 1
    else
        file.close()
        error("Unknown frame type " .. ftype)
    end
end

for i = 0, 15 do
    term.setPaletteColor(2^i, term.nativePaletteColor(2^i))
end
term.setBackgroundColor(colors.black)
term.setTextColor(colors.white)
term.setCursorPos(1, 1)
term.clear()
